const MODE=1,ALL=!1,NOISESEED=hashFnv32a(fxhash);let canvas,rescaling_width,rescaling_height,PALETTE,PALETTE_LABEL,DOMINANTSIDE,ALLDONE=!1,RESCALINGCONSTANT=800,FRAMEDWIDTH=800,FRAMED=!1,TITLE="Birthday Pony",ARTIST="Stefan Schwaha, @sektionschef",DESCRIPTION="Javascript on html canvas",URL="https://digitalitility.com",YEAR="2022",PRICE="êœ© 1",EDITIONS="365 editions",GRAINAMOUNT=.03,TIMINGSTATE="Start",BRUSHFULLSPEEDMIN=2,BRUSHFULLSPEEDMAX=6,CURRENTPIXELDENS=1;const PALETTESYSTEM={Goose:{background:"#747474",line:"#7474744f",base:{fillFirst:"#DEDAD415",fillSecond:"#d3cdc515",strokeFirst:"#DEDAD473",strokeSecond:"#DEDAD473",grainColorFirst:"#80140d",grainColorSecond:"#aa0303"},cLevel:{fillFirst:"#a39c9215",fillSecond:"#B6ADA015",strokeFirst:"#afa39273",strokeSecond:"#8f877b73",grainColorFirst:"#9455551e",grainColorSecond:"#804f4f67"},bLevel:{fillFirst:"#DFE1E215",fillSecond:"#c0c5c715",strokeFirst:"#DFE1E273",strokeSecond:"#c0c5c773",grainColorFirst:"#af808038",grainColorSecond:"#dab6b659"},aLevel:{fillFirst:"#DFE8F015",fillSecond:"#c0d7ee15",strokeFirst:"#adc6db73",strokeSecond:"#DFE8F073",grainColorFirst:"#4b404038",grainColorSecond:"#201a1a59"}}};function preload(){const e=window.location.search,o=new URLSearchParams(e);o.has("highres")&&(CURRENTPIXELDENS=parseInt(o.get("highres"))),o.has("framed")&&"true"===o.get("framed")&&(FRAMED=!0),FRAMED?(setFrameHTML(),setLabelHTML()):setPlainHTML(),setTagsHTML()}function setup(){noiseSeed(NOISESEED),randomSeed(NOISESEED),scaleDynamically(),canvas=createCanvas(rescaling_width,rescaling_height,WEBGL),canvas.id("badAssCanvas"),FRAMED?canvas.parent("canvasHolderFrame"):canvas.parent("canvasHolderPlain"),cam1=createCamera(),paintBroBuffer=createGraphics(width,height,"WEBGL"),grainBuffer=createGraphics(width,height,WEBGL),grainShader=grainBuffer.createShader(vert,frag),shouldAnimate=!0,brushSystem=new BrushSystem,dotSystem=new drawDotsSystem,sunPolygon=[createVector(.19*DOMINANTSIDE,.05*DOMINANTSIDE),createVector(.03*DOMINANTSIDE,.05*DOMINANTSIDE),createVector(width-.19*DOMINANTSIDE,height-.05*DOMINANTSIDE),createVector(width-.05*DOMINANTSIDE,height-.05*DOMINANTSIDE)],paintbro=new paintBro({buffer:paintBroBuffer,elementSizeMin:.01*DOMINANTSIDE,elementSizeMax:.04*DOMINANTSIDE,strokeWeight:.001*DOMINANTSIDE,numberQuantisizer:80,brushLength:10,distortionFactor:.001*DOMINANTSIDE,stepSize:.005*DOMINANTSIDE}),baseNoise=new TexMex({buffer:paintBroBuffer,posX:0,posY:0,elementLayer:"base",elementSizeMin:.001*DOMINANTSIDE,elementSizeMax:.002*DOMINANTSIDE,fillColor:color(PALETTE.base.grainColorFirst),secondaryFillColor:color(PALETTE.base.grainColorSecond),numberQuantisizer:1e3,relCenterX:width/8*5,relCenterY:height/8*7,SDevX:width/7,SDevY:height/7}),cLevelNoise=new TexMex({buffer:paintBroBuffer,posX:0,posY:0,elementLayer:"cLevel",elementSizeMin:.001*DOMINANTSIDE,elementSizeMax:.002*DOMINANTSIDE,fillColor:color(PALETTE.cLevel.grainColorFirst),secondaryFillColor:color(PALETTE.cLevel.grainColorSecond),numberQuantisizer:1e3,relCenterX:width/8*5,relCenterY:height/8*4,SDevX:width/3,SDevY:height/6}),bLevelNoise=new TexMex({buffer:paintBroBuffer,posX:0,posY:0,elementLayer:"bLevel",elementSizeMin:.001*DOMINANTSIDE,elementSizeMax:.002*DOMINANTSIDE,fillColor:color(PALETTE.bLevel.grainColorFirst),secondaryFillColor:color(PALETTE.bLevel.grainColorSecond),numberQuantisizer:500,relCenterX:width/8*2,relCenterY:height/8*4,SDevX:width/3,SDevY:height/8}),aLevelNoise=new TexMex({buffer:paintBroBuffer,posX:0,posY:0,elementLayer:"aLevel",elementSizeMin:.001*DOMINANTSIDE,elementSizeMax:.002*DOMINANTSIDE,fillColor:color(PALETTE.aLevel.grainColorFirst),secondaryFillColor:color(PALETTE.aLevel.grainColorSecond),numberQuantisizer:1e3,relCenterX:width/8*5,relCenterY:height/8*4,SDevX:width/3,SDevY:height/6})}function draw(){smooth(),orbitControl(),1==frameCount&&pixelDensity(CURRENTPIXELDENS),30==frameCount&&(paintBroBuffer.background(color(PALETTE.background)),paintbro.show("base"),console.log("base finished"),TIMINGSTATE="base finished",dotSystem.fireBrush("aLevel")),brushSystem.check_all_complete("aLevel")&&"base finished"==TIMINGSTATE&&(paintbro.show("aLevel"),console.log("aLevel finished"),TIMINGSTATE="aLevel finished",dotSystem.fireBrush("bLevel")),brushSystem.check_all_complete("bLevel")&&"aLevel finished"==TIMINGSTATE&&(paintbro.show("bLevel"),console.log("bLevel finished"),TIMINGSTATE="bLevel finished",dotSystem.fireBrush("cLevel")),brushSystem.check_all_complete("cLevel")&&"bLevel finished"==TIMINGSTATE&&(paintbro.show("cLevel"),console.log("cLevel finished"),TIMINGSTATE="cLevel finished",ALLDONE=!0),push(),translate(-width/2,-height/2),image(paintBroBuffer,0,0,paintBroBuffer.width,paintBroBuffer.height),pop(),brushSystem.show(),1==ALLDONE&&(console.log("All done"),noLoop(),fxpreview(),console.warn(Math.round(1e3*fxrand())/1e3))}function mousePressed(){}function applyGrain(){grainBuffer.clear(),grainBuffer.reset(),grainBuffer.push(),grainBuffer.shader(grainShader),grainShader.setUniform("source",canvas),shouldAnimate&&grainShader.setUniform("noiseSeed",frameCount/100),grainShader.setUniform("noiseAmount",GRAINAMOUNT),grainBuffer.rectMode(CENTER),grainBuffer.noStroke(),grainBuffer.rect(0,0,width,height),grainBuffer.pop(),clear(),push(),translate(-width/2,-height/2),image(grainBuffer,0,0),pop()}choosePalette();const vert="\n// Determines how much precision the GPU uses when calculating floats\nprecision highp float;\n\n// Get the position attribute of the geometry\nattribute vec3 aPosition;\n\n// Get the texture coordinate attribute from the geometry\nattribute vec2 aTexCoord;\n\n// The view matrix defines attributes about the camera, such as focal length and camera position\n// Multiplying uModelViewMatrix * vec4(aPosition, 1.0) would move the object into its world position in front of the camera\nuniform mat4 uModelViewMatrix;\n\n// uProjectionMatrix is used to convert the 3d world coordinates into screen coordinates\nuniform mat4 uProjectionMatrix;\n\nvarying vec2 vVertTexCoord;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertTexCoord = aTexCoord;\n}\n",frag="\nprecision highp float;\nvarying vec2 vVertTexCoord;\n\nuniform sampler2D source;\nuniform float noiseSeed;\nuniform float noiseAmount;\n\n// Noise functions\n// https://github.com/patriciogonzalezvivo/lygia/blob/main/generative/random.glsl\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvoid main() {\n    // GorillaSun's grain algorithm\n    vec4 inColor = texture2D(source, vVertTexCoord);\n    gl_FragColor = clamp(inColor + vec4(\n        mix(-noiseAmount, noiseAmount, fract(noiseSeed + rand(vVertTexCoord * 1234.5678))),\n        mix(-noiseAmount, noiseAmount, fract(noiseSeed + rand(vVertTexCoord * 876.54321))),\n        mix(-noiseAmount, noiseAmount, fract(noiseSeed + rand(vVertTexCoord * 3214.5678))),\n        0.\n    ), 0., 1.);\n}\n";